{"ast":null,"code":"'use strict';\n\nvar helpers = require('../helpers/index');\n\nvar basic = require('./platform.basic');\n\nvar dom = require('./platform.dom'); // @TODO Make possible to select another platform at build time.\n\n\nvar implementation = dom._enabled ? dom : basic;\n/**\r\n * @namespace Chart.platform\r\n * @see https://chartjs.gitbooks.io/proposals/content/Platform.html\r\n * @since 2.4.0\r\n */\n\nmodule.exports = helpers.extend({\n  /**\r\n   * @since 2.7.0\r\n   */\n  initialize: function initialize() {},\n\n  /**\r\n   * Called at chart construction time, returns a context2d instance implementing\r\n   * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\r\n   * @param {*} item - The native item from which to acquire context (platform specific)\r\n   * @param {Object} options - The chart options\r\n   * @returns {CanvasRenderingContext2D} context2d instance\r\n   */\n  acquireContext: function acquireContext() {},\n\n  /**\r\n   * Called at chart destruction time, releases any resources associated to the context\r\n   * previously returned by the acquireContext() method.\r\n   * @param {CanvasRenderingContext2D} context - The context2d instance\r\n   * @returns {Boolean} true if the method succeeded, else false\r\n   */\n  releaseContext: function releaseContext() {},\n\n  /**\r\n   * Registers the specified listener on the given chart.\r\n   * @param {Chart} chart - Chart from which to listen for event\r\n   * @param {String} type - The ({@link IEvent}) type to listen for\r\n   * @param {Function} listener - Receives a notification (an object that implements\r\n   * the {@link IEvent} interface) when an event of the specified type occurs.\r\n   */\n  addEventListener: function addEventListener() {},\n\n  /**\r\n   * Removes the specified listener previously registered with addEventListener.\r\n   * @param {Chart} chart -Chart from which to remove the listener\r\n   * @param {String} type - The ({@link IEvent}) type to remove\r\n   * @param {Function} listener - The listener function to remove from the event target.\r\n   */\n  removeEventListener: function removeEventListener() {}\n}, implementation);\n/**\r\n * @interface IPlatform\r\n * Allows abstracting platform dependencies away from the chart\r\n * @borrows Chart.platform.acquireContext as acquireContext\r\n * @borrows Chart.platform.releaseContext as releaseContext\r\n * @borrows Chart.platform.addEventListener as addEventListener\r\n * @borrows Chart.platform.removeEventListener as removeEventListener\r\n */\n\n/**\r\n * @interface IEvent\r\n * @prop {String} type - The event type name, possible values are:\r\n * 'contextmenu', 'mouseenter', 'mousedown', 'mousemove', 'mouseup', 'mouseout',\r\n * 'click', 'dblclick', 'keydown', 'keypress', 'keyup' and 'resize'\r\n * @prop {*} native - The original native event (null for emulated events, e.g. 'resize')\r\n * @prop {Number} x - The mouse x position, relative to the canvas (null for incompatible events)\r\n * @prop {Number} y - The mouse y position, relative to the canvas (null for incompatible events)\r\n */","map":null,"metadata":{},"sourceType":"script"}